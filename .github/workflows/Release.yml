name: Release

on:
  workflow_dispatch:

env:
  FLUTTER_CHANNEL: 'stable'
  FLUTTER_VERSION: '3.29.0'
  LLVM_VERSION: '10.0'
  RUST_TOOLCHAIN: nightly-2025-02-26
  NDK_VERSION: 29.0.13113456
  JDK_VERSION: 17

jobs:

  ci-pass:
    name: CI is green
    runs-on: ubuntu-latest
    needs:
      - build_release_assets
    steps:
      - run: exit 0

  # 检查 Release 是否存在
  check-and-create-release:
    runs-on: ubuntu-latest
    outputs:
      ios: ${{ steps.check-release.outputs.ios }} 
      android: ${{ steps.check-release.outputs.android }}
      windows: ${{ steps.check-release.outputs.windows }}
      linux: ${{ steps.check-release.outputs.linux }}
    steps:
      # 检出代码库
      - name: Checkout repository
        uses: actions/checkout@v3

      # 检查 Release 是否存在
      - name: Check and create release
        id: check-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export VERSION=$(cat ci/version/code.txt | xargs echo)
          echo "VERSION : $VERSION"
          export RELEASE=$(gh release view $VERSION --json id -q .id || echo "NOT_FOUND")
          echo "RELEASE : $RELEASE"
          if [ "$RELEASE" == "NOT_FOUND" ]; then
            echo "Release does not exist. Creating release ${{ github.event.inputs.version }}."
            gh release create ${{ github.event.inputs.version }} -F ci/version.info.txt --target ${{ github.sha }}
            echo "ios=true" >> $GITHUB_OUTPUT
            echo "android=true" >> $GITHUB_OUTPUT
            echo "windows=true" >> $GITHUB_OUTPUT
            echo "linux=true" >> $GITHUB_OUTPUT
          else
            declare -A asset_dict
            asset_dict["ios"]="$GITHUB_REPOSITORY-$VERSION-nosign.ipa"
            asset_dict["android"]="$GITHUB_REPOSITORY-arm64-$VERSION.apk"
            asset_dict["windows"]="$GITHUB_REPOSITORY-$VERSION-windows-x86_64.zip"
            asset_dict["linux"]="$GITHUB_REPOSITORY-$VERSION.AppImage"
            echo "Release ${{ github.event.inputs.version }} already exists."
            gh release view ${{ github.event.inputs.version }} --json assets > release_assets.json
            echo release_assets.json :
            cat release_assets.json
            for key in "${!asset_dict[@]}"; do
              asset_name=${asset_dict[$key]}
              asset_exists=$(gh release view ${{ github.event.inputs.version }} --json assets -q ".assets[].name" | grep -w "$asset_name" || echo "NOT_FOUND")
              if [ "$asset_exists" == "NOT_FOUND" ]; then
                echo "Asset $asset_name does not exist. Upload is required."
                echo "$key=true" >> $GITHUB_OUTPUT
              else
                echo "Asset $asset_name already exists. No upload is required."
                echo "$key=false" >> $GITHUB_OUTPUT
              fi
            done
          fi
          echo "GITHUB_OUTPUT : $GITHUB_OUTPUT :"
          cat $GITHUB_OUTPUT

  build_release_assets:
    name: Build release assets
    needs:
      - check-and-create-release
    strategy:
      fail-fast: false
      matrix:
        config:
          - target: ios
            host: macos-latest
          - target: android
            host: ubuntu-latest
          - target: linux
            host: ubuntu-latest
          - target: windows
            host: windows-latest

    if: needs.check-and-create-release.outputs.${{ matrix.config.target }} == 'true'
    runs-on: ${{ matrix.config.host }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Cargo ci build cache
        uses: actions/cache@v3
        with:
          path: |
            daisy/ci/target/
          key: ${{ runner.os }}-cargo-ci_target

      - name: Cache Flutter dependencies (Linux/Android)
        if: matrix.config.target == 'android'
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter

      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.flutter_channel }}
          flutter-version: ${{ env.flutter_version }}

      - name: Install LLVM and Clang (Linux/Android)
        if: startsWith(matrix.config.target, 'android') || startsWith(matrix.config.target, 'linux')
        run: |
          sudo apt update
          sudo apt install -y libclang-dev

      - name: Install libfuse2 (Linux)
        if: matrix.config.target == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libfuse2

      - name: Install cargo tools (non-android)
        if: matrix.config.target != 'android'
        run: |
          cargo install cbindgen

      - name: Install cargo tools (Android)
        if: matrix.config.target == 'android'
        run: |
          cargo install cargo-ndk

      - name: Setup java (Android)
        if: startsWith(matrix.config.target, 'android')
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'temurin'

      - name: Setup android tools (Android)
        if: startsWith(matrix.config.target, 'android')
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546
          packages: 'platform-tools platforms;android-32 build-tools;30.0.2 ndk;${{ env.NDK_VERSION }}'

      - name: Set-Version (All)
        run: |
          cd daisy/ci
          cp version.code.txt ../lib/assets/version.txt

      - name: Cargo native build cache
        uses: actions/cache@v3
        with:
          path: |
            daisy/native/target/
          key: ${{ runner.os }}-cargo-native_target-${{ matrix.config.target }}

      - name: Install rust target and build (ios)
        if: matrix.config.target == 'ios'
        run: |
          rustup target install aarch64-apple-ios
          cd daisy
          /usr/libexec/PlistBuddy -c 'Add :application-identifier string opensource.daisy' ios/Runner/Info.plist
          flutter build ios --no-simulator --no-codesign --release
          cd build
          rm -rf Payload
          mkdir Payload
          mv ios/iphoneos/Runner.app Payload/
          sh ../scripts/thin-payload.sh Payload
          zip -r -9 nosign.ipa Payload
          cd ..

      - name: Install rust target and build (Android-arm64)
        if: matrix.config.target == 'android'
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          rustup target install aarch64-linux-android
          cd daisy
          flutter build apk --target-platform android-arm64

      - name: Install rust target and build (Android-arm32)
        if: ( matrix.config.target == 'android-arm32')
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          rustup target install armv7-linux-androideabi
          cd daisy
          flutter build apk --target-platform android-arm

      - name: Install rust target and build (Android-x86_64)
        if: ( matrix.config.target == 'android-x86_64')
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          rustup target install x86_64-linux-android
          cd daisy
          flutter build apk --target-platform android-x64

      - name: Install dependencies and build (Linux)
        if: matrix.config.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt install -y ninja-build liblzma-dev libgtk-3-dev libgl1-mesa-dev xorg-dev
          curl -JOL https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod a+x appimagetool-x86_64.AppImage
          mv appimagetool-x86_64.AppImage appimagetool
          cd daisy
          flutter pub get
          flutter config --enable-linux-desktop
          flutter build linux --release
          mv build/linux/x64/release/bundle/{daisy,AppRun}
          cp linux/appimage/* build/linux/x64/release/bundle/
          ../appimagetool build/linux/x64/release/bundle/
          mv *.AppImage build/linux.AppImage

      - name: build (windows)
        if: matrix.config.target == 'windows'
        run: |
          cd daisy
          flutter pub get
          flutter config --enable-windows-desktop
          flutter build windows
          cd build/windows/x64/runner/Release
          Compress-Archive * ../../../../../build/windows.zip
          cd ../../../../..

      - name: Build (macos)
        if: matrix.config.target == 'macos'
        run: |
          cd daisy
          flutter pub get
          rustup target install x86_64-apple-darwin
          rustup target install aarch64-apple-darwin
          flutter config --enable-macos-desktop
          flutter build macos
          cd build
          mkdir appimage
          mv macos/Build/Products/Release/daisy.app appimage/
          ln -sf /Applications appimage/
          hdiutil create -volname daisy -srcfolder appimage -ov -format UDBZ macos.dmg
          cd ..

      - name: Sign APK (Android)
        if: startsWith(matrix.config.target, 'android')
        env:
          KEY_FILE_BASE64: ${{ secrets.KEY_FILE_BASE64 }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cd daisy
          echo $KEY_FILE_BASE64 > key.jks.base64
          base64 -d key.jks.base64 > key.jks
          echo $KEY_PASSWORD | $ANDROID_HOME/build-tools/30.0.2/apksigner sign --ks key.jks build/app/outputs/flutter-apk/app-release.apk

      - name: Cargo ci build cache
        uses: actions/cache@v3
        with:
          path: |
            daisy/ci/target/
          key: ${{ runner.os }}-cargo-ci_target


      - name: Upload Asset (ios)
        if: matrix.config.target == 'ios'
        run: |
          export VERSION=$(cat ci/version/code.txt | xargs echo)
          echo "Uploading asset $GITHUB_REPOSITORY-$VERSION-nosign.ipa"
          gh release upload ${{ github.event.inputs.version }} "build/nosign.ipa#$GITHUB_REPOSITORY-$VERSION-nosign.ipa" --clobber

      - name: Upload Asset (android arm64)
        if: matrix.config.target == 'android'
        run: |
          export VERSION=$(cat ci/version/code.txt | xargs echo)
          if [ "${{ matrix.config.target }}" == "android-arm64" ]; then
            echo "Uploading asset $GITHUB_REPOSITORY-arm64-$VERSION.apk"
            gh release upload ${{ github.event.inputs.version }} "build/app/outputs/flutter-apk/app-release.apk#$GITHUB_REPOSITORY-arm64-$VERSION.apk" --clobber
          fi
      
      - name: Upload Asset (windows)
        if: matrix.config.target == 'windows'
        run: |
          $VERSION = (Get-Content -Path "ci/version/code.txt").Trim()
          echo "Uploading asset $GITHUB_REPOSITORY-$VERSION-windows-x86_64.zip"
          gh release upload ${{ github.event.inputs.version }} "build/windows.zip#$GITHUB_REPOSITORY-$VERSION-windows-x86_64.zip" --clobber

      - name: Upload Asset (linux)
        if: matrix.config.target == 'linux'
        run: |
          export VERSION=$(cat ci/version/code.txt | xargs echo)
          echo "Uploading asset $GITHUB_REPOSITORY-$VERSION.AppImage"
          gh release upload ${{ github.event.inputs.version }} "build/linux.AppImage#$GITHUB_REPOSITORY-$VERSION.AppImage" --clobber

